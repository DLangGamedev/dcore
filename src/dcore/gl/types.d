/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module dcore.gl.types;

alias GLbyte = byte;
alias GLclampf = float;
alias GLfixed = int;
alias GLshort = short;
alias GLushort = ushort;
alias GLvoid = void;
struct __GLsync;
alias GLsync = __GLsync*;
alias GLint64 = long;
alias GLuint64 = ulong;
alias GLenum = uint;
alias GLuint = uint;
alias GLchar = char;
alias GLfloat = float;
alias GLsizeiptr = size_t;
alias GLintptr = ptrdiff_t;
alias GLbitfield = uint;
alias GLint = int;
alias GLboolean = ubyte;
alias GLsizei = int;
alias GLubyte = ubyte;

enum GL_DEPTH_BUFFER_BIT = 0x0100;
enum GL_STENCIL_BUFFER_BIT = 0x400;
enum GL_COLOR_BUFFER_BIT = 0x4000;

enum GL_FALSE = 0;
enum GL_TRUE = 1;
enum GL_POINTS = 0x0000;
enum GL_LINES = 0x0001;
enum GL_LINE_LOOP = 0x0002;
enum GL_LINE_STRIP = 0x0003;
enum GL_TRIANGLES = 0x0004;
enum GL_TRIANGLE_STRIP = 0x0005;
enum GL_TRIANGLE_FAN = 0x0006;
enum GL_ZERO = 0;
enum GL_ONE = 1;

enum GL_UNSIGNED_SHORT = 0x1403;

enum GL_FLOAT = 0x1406;

enum GL_ARRAY_BUFFER = 0x8892;
enum GL_ELEMENT_ARRAY_BUFFER = 0x8893;

enum GL_STATIC_DRAW = 0x88E4;

enum GL_CULL_FACE = 0x0B44;

enum GL_DEPTH_TEST = 0x0B71;

enum GL_NEVER = 0x0200;
enum GL_LESS = 0x0201;
enum GL_EQUAL = 0x0202;
enum GL_LEQUAL = 0x0203;
enum GL_GREATER = 0x0204;
enum GL_NOTEQUAL = 0x0205;
enum GL_GEQUAL = 0x0206;
enum GL_ALWAYS = 0x0207;

enum GL_FRAGMENT_SHADER = 0x8B30;
enum GL_VERTEX_SHADER = 0x8B31;

// TODO: other types
