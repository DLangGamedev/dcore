/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module dcore.gl.context;

import dcore.linker;
import dcore.gl.types;
import dcore.gl.funcs;

enum WGL_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
enum WGL_CONTEXT_MINOR_VERSION_ARB = 0x2092;
enum WGL_CONTEXT_PROFILE_MASK_ARB = 0x9126;

enum WGL_CONTEXT_ES_PROFILE_BIT_EXT = 0x00000004;
enum WGL_CONTEXT_ES2_PROFILE_BIT_EXT = 0x00000004;

enum WGL_CONTEXT_CORE_PROFILE_BIT_ARB = 0x00000001;
enum WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = 0x00000002;

struct OpenGLVersion
{
    int major;
    int minor;
    int profile;
}

enum
{
    OpenGL20 = OpenGLVersion(2, 0, 0),
    OpenGL30 = OpenGLVersion(3, 0, 0),
    OpenGL31 = OpenGLVersion(3, 1, 0),
    OpenGL32 = OpenGLVersion(3, 2, WGL_CONTEXT_CORE_PROFILE_BIT_ARB),
    OpenGL33 = OpenGLVersion(3, 3, WGL_CONTEXT_CORE_PROFILE_BIT_ARB),
    OpenGL40 = OpenGLVersion(4, 0, WGL_CONTEXT_CORE_PROFILE_BIT_ARB),
    OpenGL41 = OpenGLVersion(4, 1, WGL_CONTEXT_CORE_PROFILE_BIT_ARB),
    OpenGL42 = OpenGLVersion(4, 2, WGL_CONTEXT_CORE_PROFILE_BIT_ARB),
    OpenGL43 = OpenGLVersion(4, 3, WGL_CONTEXT_CORE_PROFILE_BIT_ARB),
    OpenGL44 = OpenGLVersion(4, 4, WGL_CONTEXT_CORE_PROFILE_BIT_ARB),
    OpenGL45 = OpenGLVersion(4, 5, WGL_CONTEXT_CORE_PROFILE_BIT_ARB),
    OpenGL46 = OpenGLVersion(4, 6, WGL_CONTEXT_CORE_PROFILE_BIT_ARB),
    OpenGLES20 = OpenGLVersion(2, 0, WGL_CONTEXT_ES2_PROFILE_BIT_EXT),
    OpenGLES30 = OpenGLVersion(3, 0, WGL_CONTEXT_ES2_PROFILE_BIT_EXT),
    OpenGLES31 = OpenGLVersion(3, 1, WGL_CONTEXT_ES2_PROFILE_BIT_EXT),
    OpenGLES32 = OpenGLVersion(3, 2, WGL_CONTEXT_ES2_PROFILE_BIT_EXT)
}

version(Windows)
{
    import core.sys.windows.windows;
    
    extern(Windows) @nogc nothrow
    {
        alias f_wglCreateContext = HGLRC function(HDC);
        alias f_wglDeleteContext = BOOL function(HGLRC);
        alias f_wglGetProcAddress = PROC function(LPCSTR);
        alias f_wglMakeCurrent = BOOL function(HDC, HGLRC);
        alias f_wglCreateContextAttribsARB = HGLRC function(HDC hDC, HGLRC hShareContext, const(int)* attribList);
    }
    
    __gshared
    {
        f_wglCreateContext wglCreateContext;
        f_wglDeleteContext wglDeleteContext;
        f_wglGetProcAddress wglGetProcAddress;
        f_wglMakeCurrent wglMakeCurrent;
        f_wglCreateContextAttribsARB wglCreateContextAttribsARB;
    }
}
else version(Posix)
{
    import core.sys.posix.dlfcn;
}

__gshared
{
    private SharedLib libogl;
}

private void* loadGLProc(const(char)* name) @nogc nothrow
{
    pragma(inline, true);
    
    version(Windows)
    {
        void* p = wglGetProcAddress(name);
        if (p !is null)
             return p;
        return getFunctionPointer(libogl, name);
    }
    else version(Posix)
    {
        return getFunctionPointer(libogl, name);
    }
    else
    {
        pragma(msg, "Warning: \"loadGLProc\" is not implemented on this platform!");
        return null;
    }
}

void init() @nogc nothrow
{
    version(Windows)
    {
        libogl = openLibrary("Opengl32.dll");
        wglCreateContext = cast(f_wglCreateContext)getFunctionPointer(libogl, "wglCreateContext");
        wglDeleteContext = cast(f_wglDeleteContext)getFunctionPointer(libogl, "wglDeleteContext");
        wglGetProcAddress = cast(f_wglGetProcAddress)getFunctionPointer(libogl, "wglGetProcAddress");
        wglMakeCurrent = cast(f_wglMakeCurrent)getFunctionPointer(libogl, "wglMakeCurrent");
    }
    else version(Posix)
    {
        libogl = openLibrary("libGL.so.1", RTLD_LAZY);
        
        // TODO
    }
    else version(WebAssembly)
    {
        // TODO
    }
}

version(Windows)
{
    private HGLRC loadOpenGL_Windows(HDC hdc, OpenGLVersion oglv)
    {
        PIXELFORMATDESCRIPTOR pfd;
        pfd.nSize = PIXELFORMATDESCRIPTOR.sizeof;
        pfd.nVersion = 1;
        pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
        pfd.iPixelType = PFD_TYPE_RGBA;
        pfd.cColorBits = 32;
        pfd.cDepthBits = 32;
        pfd.iLayerType = PFD_MAIN_PLANE;
        int pixelFormat = ChoosePixelFormat(hdc, &pfd);
        SetPixelFormat(hdc, pixelFormat, &pfd);
        
        HGLRC tmpGlContext = wglCreateContext(hdc);
        if (tmpGlContext is null)
            return null;
        
        wglMakeCurrent(hdc, tmpGlContext);
        wglCreateContextAttribsARB = cast(f_wglCreateContextAttribsARB)wglGetProcAddress("wglCreateContextAttribsARB");

        int[7] attribs = [
            WGL_CONTEXT_MAJOR_VERSION_ARB, oglv.major,
            WGL_CONTEXT_MINOR_VERSION_ARB, oglv.minor,
            WGL_CONTEXT_PROFILE_MASK_ARB, oglv.profile,
            0
        ];

        HGLRC glesContext = wglCreateContextAttribsARB(hdc, null, attribs.ptr);
        if (glesContext is null)
            return null;
        
        wglMakeCurrent(hdc, null);
        wglDeleteContext(tmpGlContext);
        wglMakeCurrent(hdc, glesContext);
        
        loadOpenGLFunctions(oglv);
        
        return glesContext;
    }
}
else version(Posix)
{
    // TODO
}

void* loadOpenGL(void* deviceContext, OpenGLVersion oglv)
{
    pragma(inline, true);
    version(Windows)
    {
        return loadOpenGL_Windows(deviceContext, oglv);
    }
    else version(Posix)
    {
        // TODO
        pragma(msg, "Warning: \"loadOpenGL\" is not implemented on this platform!");
        return null;
    }
    else
    {
        pragma(msg, "Warning: \"loadOpenGL\" is not implemented on this platform!");
        return null;
    }
}

void bindGLSymbol(void** symbolPtr, const(char)* name)
{
    *symbolPtr = loadGLProc(name);
}

private void loadOpenGLFunctions(OpenGLVersion oglv)
{
    static foreach(symbol; __traits(allMembers, dcore.gl.funcs))
    {
        static if (symbol.length > 2 && symbol[0..2] == "gl")
            bindGLSymbol(
                cast(void**)&__traits(getMember, dcore.gl.funcs, symbol),
                __traits(getMember, dcore.gl.funcs, symbol).stringof);
    }
    
    /*
    glClearColor = cast(f_glClearColor)loadGLProc("glClearColor");
    glClear = cast(f_glClear)loadGLProc("glClear");
    glFlush = cast(f_glFlush)loadGLProc("glFlush");
    */
    
    // TODO: other functions
}
