/*
Copyright (c) 2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module dcore.gl.signatures;

import dcore.gl.types;

extern(System) @nogc nothrow:

alias f_glActiveTexture = void function(GLenum texture);
alias f_glAttachShader = void function(GLuint program, GLuint shader);

alias f_glBindAttribLocation = void function(GLuint program, GLuint index, const(GLchar)* name);
alias f_glBindBuffer = void function(GLenum target, GLuint buffer);
alias f_glBindFramebuffer = void function(GLenum target, GLuint framebuffer);
alias f_glBindRenderbuffer = void function(GLenum target, GLuint renderbuffer);
alias f_glBindTexture = void function(GLenum target, GLuint texture);
alias f_glBlendColor = void function(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
alias f_glBlendEquation = void function(GLenum mode);
alias f_glBlendEquationSeparate = void function(GLenum modeRGB, GLenum modeAlpha);
alias f_glBlendFunc = void function(GLenum sfactor, GLenum dfactor);
alias f_glBlendFuncSeparate = void function(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
alias f_glBufferData = void function(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
alias f_glBufferSubData = void function(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);

alias f_glCheckFramebufferStatus = GLenum function(GLenum target);
alias f_glClear = void function(GLenum mask);
alias f_glClearColor = void function(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

alias f_glFlush = void function();
