/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dcore.math.base;

// Use this version switch to build a version that only depends on libc
//version = NoPhobos;

version(FreeStanding)
{
    version = UseFreeStandingMath;
}

version(UseFreeStandingMath)
{
    version(X86)
    {
        version = UseX87Math;
    }
    version(X86_64)
    {
        version = UseX87Math;
    }
}

enum double PI = 3.14159265358979323846;
enum double HALFPI = 1.5707964;
enum double QUARTPI = 0.7853982;
enum double INVPI = 0.31830988618;
enum double INVTWOPI = 0.15915494309;
enum double TWOPI = 6.28318530718;
enum double THREEHALFPI = 4.7123889;
enum double LN2 = 0.693147180559945309417232121458;
enum double INV_LN2 = 1.0 / LN2;
enum double LOG10E = 0.4342944819032518;

bool isNaN(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    return x != x;
}

int isInfinity(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    return !isNaN(x) && isNaN(x - x);
}

T max(T)(T a, T b) pure nothrow @nogc
{
    pragma(inline, true);
    return (a > b)? a : b;
}

T min(T)(T a, T b) pure nothrow @nogc
{
    pragma(inline, true);
    return (a < b)? a : b;
}

T abs(T)(T v) pure nothrow @nogc
{
    pragma(inline, true);
    return (v > 0.0)? v : -v;
}

T clamp(T)(T v, T mi, T ma) pure nothrow @nogc
{
    pragma(inline, true);
    if (v < mi) return mi;
    else if (v > ma) return ma;
    else return v;
}

bool isClose(T)(T a, T b, T delta) pure nothrow @nogc
{
    pragma(inline, true);
    return abs(a - b) < delta;
}

T trunc(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    return cast(long)x;
}

T floorFallback(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    long intPart = cast(long)x;
    return (x < 0 && x != cast(T)intPart) ? intPart - 1 : intPart;
}

T ceilFallback(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    long intPart = cast(long)x;
    T xtrunc = (x < 0 && x != cast(T)intPart) ? intPart - 1 : intPart;
    return (xtrunc < x)? xtrunc + 1 : x;
}

T roundFallback(T)(T x) pure nothrow @nogc
{
    if (x < 0.0)
        return cast(long)(x - 0.5);
    else
        return cast(long)(x + 0.5);
}

T fmod(T)(T x, T y) pure nothrow @nogc
{
    pragma(inline, true);
    auto m = floorFallback(x / y);
    return max(0, x - y * m);
}

T sqrtFallback(T)(T x) pure nothrow @nogc
{
    version(UseX87Math)
    {
        T result;
        
        if (is(T == float))
        {
            asm pure nothrow @nogc
            {
                fld dword ptr x;
                fsqrt;
                fstp dword ptr result;
            }
        }
        else
        {
            asm pure nothrow @nogc
            {
                fld qword ptr x;
                fsqrt;
                fstp qword ptr result;
            }
        }
        
        return result;
    }
    else
    {
        double z = cast(double)(x > 1.0) ? x * 0.5 : x + 1.0;
        for (uint i = 1; i <= 10; i++)
        {
            z -= (z * z - x) / (2.0 * z);
        }
        return cast(T)z;
    }
}

T cbrtFallback(T)(T x) pure nothrow @nogc
{
    enum OneOverThree = 1.0 / 3.0;
    if (x < 0) return -cbrt(-x);
    if (isNaN(x) || isInfinity(x)) return x;
    if (x == 0) return 0;
    T a = sqrtFallback(x);
    T b = T.infinity;
    while (a < b)
    {
        b = a;
        a = (2.0 * a + (x / (b * b))) * OneOverThree;
    }
    return a;
}

T sinFallback(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    
    T xfmod = x - floorFallback(x * INVTWOPI) * TWOPI;
    x = (0 > xfmod)? 0 : xfmod;
    
    T rsign = 1.0;
    T adjusted_x = x;
    if (x < 0) 
    {
        adjusted_x = -x;
        rsign = -1.0;
    }
    if (adjusted_x > PI) 
    {
        adjusted_x = min(PI, TWOPI - adjusted_x);
        rsign = -1.0;
    }
    
    T j = adjusted_x * (cast(T)(sinTable.length - 2) * INVPI);
    int zero = cast(int)j;
    T nx = j - zero;
    return ((1.0 - nx) * sinTable[zero][0] + nx * sinTable[zero + 1][0]) * rsign;
}

T cosFallback(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    
    T xfmod = x - floorFallback(x * INVTWOPI) * TWOPI;
    x = (0 > xfmod)? 0 : xfmod;
    
    T adjusted_x = x;
    if (x < 0) 
    {
        adjusted_x = -x;
    }
    if (adjusted_x > PI) 
    {
        adjusted_x = min(PI, TWOPI - adjusted_x);
    }
     
    T j = adjusted_x * (cast(T)(cosTable.length - 2) * INVPI);
    int zero = cast(int)j;
    T nx = j - zero;
    return (1.0 - nx) * cosTable[zero][0] + nx * cosTable[zero + 1][0];
}

T tanFallback(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    return sin(x) / cos(x);
}

T cot(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    return cos(x) / sin(x);
}

T asinFallback(T)(T x) pure nothrow @nogc
{
    return atan2Fallback(x, sqrt(1.0 - x * x));
}

T acosFallback(T)(T x) pure nothrow @nogc
{
    return atan2Fallback(sqrt(1.0 - x * x), x);
}

T atanFallback(T)(T x) pure nothrow @nogc
{
    // Implementation from Algol 60
    const T        R1 =  0x1.9310cfe85307cp+3;
    const T        R2 = -0x1.58beca04f1805p+6;
    const T        R3 = -0x1.46d547fed8a3dp+0;
    const T        R4 = -0x1.57bd961f06c89p-4;
    const T        S1 =  0x1.b189e39236635p+4;
    const T        S2 =  0x1.a3b86f7830dc0p+2;
    const T        S3 =  0x1.1273f9e5eff20p+1;
    const T        S4 =  0x1.44831dafbf542p+0;
    const T       RT3 =  0x1.bb67ae8584caap+0;
    const T     PIBY6 =  0x1.0c152382d7365p-1;
    const T   PIBY2M1 =  0x1.243f6a8885a30p-1;
    const T     RT3M1 =  0x1.76cf5d0b09955p-1;
    const T TANPIBY12 =  0x1.126145e9ecd56p-2;
    const T       ONE =  0x1.0000000000000p+0;

    double XX1, XSQ, CONSTANT = 0.0;
    int SIGN = 0, INV = 0;

    if (x < 0) { SIGN = 1; XX1 = -x; } else XX1 = x;
    if (XX1 > ONE) { XX1 = 1.0 / XX1; INV = 1; }
    if (XX1 > TANPIBY12) { XX1 = (RT3M1 * XX1 - 1.0 + XX1) / (XX1 + RT3); CONSTANT = PIBY6; }

    XSQ = XX1 * XX1;
    XX1 = XX1 * (R1 / (XSQ + S1 + R2 / (XSQ + S2 + R3 / (XSQ + S3 + R4 / (XSQ + S4)))));
    XX1 = XX1 + CONSTANT;

    if (INV) XX1 = 1.0 - XX1 + PIBY2M1;
    if (SIGN) XX1 = -XX1;
     
    return XX1;
}

T atan2Fallback(T)(T y, T x) pure nothrow @nogc
{
    if (x > 0)
        return atan(y / x);
    else if (x < 0 && y >= 0)
        return atan(y / x) + PI;
    else if (x < 0 && y < 0)
        return atan(y / x) - PI;
    else if (x == 0 && y > 0)
        return HALFPI;
    else if (x == 0 && y < 0)
        return -HALFPI;
    else
        return 0; // Undefined
}

// exp: range reduction + Taylor on reduced interval
T expFallback(T)(T x) pure nothrow @nogc
{
    if (isNaN(x)) return x;
    if (isInfinity(x))
        return (x > 0) ? T.infinity : 0;

    // Range reduction: x = n*ln2 + r, |r| <= ln2/2
    int n = cast(int)floorFallback(x * INV_LN2 + 0.5);
    T r = x - cast(T)(n) * cast(T)LN2;

    // Taylor series for e^r, enough terms for reasonable precision
    T term = 1.0;
    T sum = 1.0;
    for (int k = 1; k <= 14; ++k)
    {
        term *= r / k;
        sum += term;
    }

    // Multiply by 2^n via repeated doubling/halving (safe-ish)
    if (n > 0)
    {
        while (n >= 30)
        {
            sum *= cast(T)(1UL << 30);
            n -= 30;
        }
        if (n > 0) sum *= cast(T)(1UL << n);
    }
    else if (n < 0)
    {
        int m = -n;
        while (m >= 30)
        {
            sum *= cast(T)(1.0) / cast(T)(1UL << 30);
            m -= 30;
        }
        if (m > 0)
            sum *= cast(T)(1.0) / cast(T)(1UL << m);
    }

    return sum;
}

// exp2: 2^x = e^(x ln2)
T exp2Fallback(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    return expFallback(x * cast(T)LN2);
}

T logFallback(T)(T x) pure nothrow @nogc
{
    if (x <= 0) return T.nan;
    if (isInfinity(x)) return T.infinity;
    if (x == 1) return 0;

    // Use range reduction via the identity log(x) = log(a * 2^n) = log(a) + n*log(2)
    // where 0.5 <= a < 1
    int n = 0;
    T a = x;

    // Scale a to [0.5, 1) range
    while (a >= 2) { a *= 0.5; n++; }
    while (a < 0.5) { a *= 2; n--; }

    // Use series expansion for log(1+y) where y = a-1
    // log(1+y) = y - y^2/2 + y^3/3 - y^4/4 + ...
    T y = a - 1;
    T y2 = y * y;
    T sum = y;
    T term = y;

    // Add terms until contribution becomes negligible
    for (int i = 2; i <= 12; i++)
    {
        term *= -y * (i - 1) / i;
        sum += term;
    }

    return sum + cast(T)LN2 * n;
}

T log2Fallback(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    return logFallback(x) * cast(T)INV_LN2;
}

T log10Fallback(T)(T x) pure nothrow @nogc
{
    pragma(inline, true);
    return logFallback(x) * cast(T)LOG10E;
}

T powFallback(T)(T x, T y) pure nothrow @nogc
{
    pragma(inline, true);
    return x ^^ y;
}

T hypotFallback(T)(T x, T y) pure nothrow @nogc
{
    if (x == 0) return 0;
    x = abs(x);
    y = abs(y);
    if (x < y)
    {
        auto t = x; x = y; y = t;
    }
    T r = y / x;
    return x * sqrt(1.0 + r * r);
}

T modfFallback(T)(T x, ref T iptr) pure nothrow @nogc
{
    pragma(inline, true);
    T i = trunc(x);
    iptr = i;
    return x - i;
}

// Greatest common divisor of a and b
auto gcdIntegral(T)(T a, T b) pure nothrow @nogc
if (is(T == byte) || is(T == ubyte) || is(T == short) || is(T == ushort) || 
    is(T == int) || is(T == uint) || is(T == long) || is(T == ulong))
{
    import std.traits: isUnsigned;

    // make non-negative
    static if (isUnsigned!T)
    {
        // unsigned
        if (a == 0) return b;
        if (b == 0) return a;
        while (b != 0)
        {
            auto t = a % b;
            a = b;
            b = t;
        }
        return a;
    }
    else
    {
        // signed
        long aa = (a < 0) ? -a : a;
        long bb = (b < 0) ? -b : b;
        while (bb != 0)
        {
            long t = aa % bb;
            aa = bb;
            bb = t;
        }
        return cast(T)aa;
    }
}

// Least common multiple of a and b
auto lcmIntegral(T)(T a, T b) pure nothrow @nogc
if (is(T == byte) || is(T == ubyte) || is(T == short) || is(T == ushort) || 
    is(T == int) || is(T == uint) || is(T == long) || is(T == ulong))
{
    pragma(inline, true);
    if (a == 0 || b == 0) return cast(T)0;
    auto g = gcdIntegral(a, b);
    // (a / g) * b may overflow for large ints
    return (a / g) * b;
}

// TODO: sinh, cosh, tanh
// TODO: asinh, acosh, atanh

version(LDC)
{
    import ldc.intrinsics;
    
    alias floor = llvm_floor;
    alias ceil = llvm_ceil;
    alias round = llvm_round;
    alias sqrt = llvm_sqrt;
    alias sin = llvm_sin;
    alias cos = llvm_cos;
    alias tan = tanFallback;
    alias exp = llvm_exp;
    alias exp2 = llvm_exp2;
    alias log = llvm_log;
    alias log2 = llvm_log2;
    alias log10 = llvm_log10;
    alias pow = llvm_pow;
    alias modf = modfFallback;
    
    version(UseFreeStandingMath)
    {
        alias cbrt = cbrtFallback;
        alias asin = asinFallback;
        alias acos = acosFallback;
        alias atan = atanFallback;
        alias atan2 = atan2Fallback;
        alias hypot = hypotFallback;
        alias gcd = gcdIntegral;
        alias lcm = lcmIntegral;
    }
    else version(NoPhobos)
    {
        extern(C) nothrow @nogc
        {
            double cbrt(double x);
            double asin(double x);
            double acos(double x);
            double atan(double x);
            double atan2(double y, double x);
            double hypot(double x, double y);
            alias gcd = gcdIntegral;
            alias lcm = lcmIntegral;
        }
    }
    else
    {
        import std.math;
        import std.numeric;
        
        alias cbrt = std.math.cbrt;
        alias asin = std.math.asin;
        alias acos = std.math.acos;
        alias atan = std.math.atan;
        alias atan2 = std.math.atan2;
        alias hypot = std.math.hypot;
        alias gcd = std.numeric.gcd;
        alias lcm = std.numeric.lcm;
    }
}
else
version(UseFreeStandingMath)
{
    version(X86)
    {
        version = UseX87Math;
    }
    version(X86_64)
    {
        version = UseX87Math;
    }
    
    import dcore.math.trigtables;
    
    alias floor = floorFallback;
    alias ceil = ceilFallback;
    alias round = roundFallback;
    alias sqrt = sqrtFallback;
    alias cbrt = cbrtFallback;
    alias sin = sinFallback;
    alias cos = cosFallback;
    alias tan = tanFallback;
    alias asin = asinFallback;
    alias acos = acosFallback;
    alias atan = atanFallback;
    alias atan2 = atan2Fallback;
    alias exp = expFallback;
    alias exp2 = exp2Fallback;
    alias log = logFallback;
    alias log2 = log2Fallback;
    alias log10 = log10Fallback;
    alias pow = powFallback;
    alias hypot = hypotFallback;
    alias modf = modfFallback;
    alias gcd = gcdIntegral;
    alias lcm = lcmIntegral;
}
else version(NoPhobos)
{
    extern(C) pure nothrow @nogc
    {
        double floor(double x);
        double ceil(double x);
        alias round = roundFallback;
        double sqrt(double x);
        double cbrt(double x);
        double sin(double x);
        double cos(double x);
        double tan(double x);
        double asin(double x);
        double acos(double x);
        double atan(double x);
        double atan2(double y, double x);
        double exp(double x);
        double exp2(double x);
        double log(double x);
        double log2(double x);
        double log10(double x);
        double pow(double x, double y);
        double hypot(double x, double y);
    }
    
    alias modf = modfFallback;
    alias gcd = gcdIntegral;
    alias lcm = lcmIntegral;
}
else
{
    import std.math;
    import std.numeric;
    
    alias floor = std.math.floor;
    alias ceil = std.math.ceil;
    alias round = std.math.round;
    alias sqrt = std.math.sqrt;
    alias cbrt = std.math.cbrt;
    alias sin = std.math.sin;
    alias cos = std.math.cos;
    alias tan = std.math.tan;
    alias asin = std.math.asin;
    alias acos = std.math.acos;
    alias atan = std.math.atan;
    alias atan2 = std.math.atan2;
    alias exp = std.math.exp;
    alias exp2 = std.math.exp2;
    alias log = std.math.log;
    alias log2 = std.math.log2;
    alias log10 = std.math.log10;
    alias pow = std.math.pow;
    alias hypot = std.math.hypot;
    alias modf = std.math.modf;
    alias gcd = std.numeric.gcd;
    alias lcm = std.numeric.lcm;
}
